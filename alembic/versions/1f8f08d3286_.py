"""empty message

Revision ID: 1f8f08d3286
Revises: 420611fd93
Create Date: 2015-11-14 23:34:21.950054

"""

# revision identifiers, used by Alembic.
revision = '1f8f08d3286'
down_revision = '420611fd93'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import relationship, backref
from sqlalchemy import (Sequence, Integer, Float, Boolean, Date, String, ForeignKey)

indicator_helper = sa.Table('indicators',
                            sa.MetaData(),
                            sa.Column('id'),
                            sa.Column('fcf'),
                            )

"""
indicator_helper = sa.Table('indicators')
    id = Column(Integer, Sequence('indicator_id_seq'), primary_key=True)
    date = Column(Date)     # Date
    buy = Column(Boolean)   # Is it a buy?
    roe = Column(Float)     # Return on Equity
    fcf = Column(Float, nullable=True)   # Free Cash Flow
    yay = Column(Float, nullable=True)   # Free Cash Flow
    pm = Column(Float)      # Profit Margin(%)
    om = Column(Float)      # Operating Margin (%)
    tde = Column(Float)     # Total Debt/Equity (%)
    pe = Column(Float)      # Price / Earnings
    cr = Column(Float)      # Current Ratio
    peg = Column(Float)     # PEG
    eps = Column(Float)     # Diluted EPS
    div = Column(Float)     # Dividend
    pfy = Column(Float)     # Growth Past 5 Years (%)
    nfy = Column(Float)     # Growth Next 5 Years (%)
    cp = Column(Float)      # Current Price
    fp = Column(Float)      # Future Price
    b15 = Column(Float)     # 15% Buy
    b12 = Column(Float)     # 12% Buy
    company_id = Column(Integer, ForeignKey('company.id'))
    company = relationship("Company",
                           backref=backref('indicators', order_by=id))
    """



def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    #op.add_column('indicators', sa.Column('fcf_tmp', sa.Float(), nullable=True))

    """
    op.create_table('indicator_new',
        sa.Column('id', sa.Integer(), Sequence('indicator_id_seq')),
        sa.Column('date', sa.Date(), nullable=True),
        sa.Column('buy', sa.Boolean(), nullable=True),
        sa.Column('roe', sa.Float(), nullable=True),
        sa.Column('fcf', sa.Float(), nullable=True),
        sa.Column('pm', sa.Float(), nullable=True),
        sa.Column('om', sa.Float(), nullable=True),
        sa.Column('tde', sa.Float(), nullable=True),
        sa.Column('pe', sa.Float(), nullable=True),
        sa.Column('cr', sa.Float(), nullable=True),
        sa.Column('peg', sa.Float(), nullable=True),
        sa.Column('eps', sa.Float(), nullable=True),
        sa.Column('div', sa.Float(), nullable=True),
        sa.Column('pfy', sa.Float(), nullable=True),
        sa.Column('nfy', sa.Float(), nullable=True),
        sa.Column('cp', sa.Float(), nullable=True),
        sa.Column('fp', sa.Float(), nullable=True),
        sa.Column('b15', sa.Float(), nullable=True),
        sa.Column('b12', sa.Float(), nullable=True),
        sa.Column('company_id', Integer, ForeignKey('company.id')),
        sa.PrimaryKeyConstraint('id')
    )
    """

    connection = op.get_bind()
    indicators = connection.execute(indicator_helper.select())
    print(indicators.fetchall()[0])
    print(dir(indicators))
    for indicator in connection.execute(indicator_helper.select()):
        fcf = indicator.fcf

        if fcf is not None:
            try:
                t = str(fcf[-1])
                tf = float(fcf[:-1])
            except:
                continue 

            if t == "B":
                fcf_cleaned = tf * 1000000000.0
            elif t == "M":
                fcf_cleaned = tf * 1000000.0
            elif t == "K":
                fcf_cleaned = tf * 1000.0
            else:
                try:
                    fcf_cleaned = float(fcf)
                except ValueError:
                    fcf_cleaned = "''"
            """
            fcf_cleaned = "''"
            connection.execute("update indicators set fcf=%s where id=%s"
                                 %(fcf_cleaned, indicator.id))
            """
            connection.execute(
                indicator_helper.update().where(
                                                indicator_helper.c.id==indicator.id
                                                ).values(
                                                         fcf=fcf_cleaned
                                                         )
                           )
    #op.alter_column('indicators', 'fcf',
    #           existing_type=sa.VARCHAR(),
    #           type_=sa.Float(),
    #           existing_nullable=True)
    ### end Alembic commands ###


def downgrade():
    ### commands auto generated by alembic - please adjust! ###
    """
    op.alter_column('indicators', 'fcf',
               existing_type=sa.Float(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
    op.drop_column('indicators', 'blah')
    """
    ### end Alembic commands ###
